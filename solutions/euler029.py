"""Distinct powers
lim_a;Base A runs from 2 to this limit;int;100`lim_b;Exponent B runs from 2 to this limit;int;100
#square #prime
Consider all integer combinations of a**b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

2**2=4,     2**3=8,     2**4=16,    2**5=32
3**2=9,     3**3=27,    3**4=81,    3**5=243
4**2=16,    4**3=64,    4**4=256,   4**5=1024
5**2=25,    5**3=125,   5**4=625,   5**5=3125

If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by a**b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
"""


def attempt_1(lim_a, lim_b):
    return len(set([a**b for a in range(2, lim_a+1) for b in range(2, lim_b+1)]))


def attempt_2(lim_a, lim_b):
    watchlist = dict()
    for base in range(2, 11):
        exponent = 2
        while base**exponent <= 100:
            if base**exponent not in watchlist:
                watchlist[base**exponent] = exponent
            exponent += 1

    result = 0
    for base in range(2, lim_a+1):
        no_units = 1
        if base in watchlist:
            no_units = watchlist[base]

        pf_multiples = [exp*no_units for exp in range(2, lim_b+1)]

        for u in range(no_units-1):
            w = u + 1
            for b in range(2, lim_b+1):
                no_units_for_u = w * b
                if no_units_for_u in pf_multiples:
                    pf_multiples.remove(no_units_for_u)

        result += len(pf_multiples)

    return result


def run(lim_a, lim_b):
    #return attempt_1(lim_a, lim_b)
    return attempt_2(lim_a, lim_b)


if __name__ == '__main__':
    #print(attempt_1(100, 100))
    print(run(100, 100))