"""Highly divisible triangular number
n;Number of divisors;int;500
#Prime  #Divisors   #Triangle numbers
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

import math
import solutions.libEuler as e

def attempt_1(n):
    t = 0
    i = 1
    num_divs = 0

    while num_divs < n:
        # increase triangle number
        t += i
        i += 1
        num_divs = 0

        # how many divisors does t have?
        for d in range(1, math.ceil(math.sqrt(t))+1):
            if (t / d) % 1 == 0:
                num_divs += 2 if d != math.sqrt(t) else 1

    return t

def attempt_2(n):
    t = 0
    i = 1
    num_divs = 0

    while num_divs < n:
        # increase triangle number
        t += i
        i += 1
        num_divs = 1

        # how many divisors does t have?
        pfs = e.prime_factors(t)
        for p in set(pfs):
            num_divs *= (pfs.count(p) + 1)

    return t


def run(n):
    #return attempt_1(n)
    return attempt_2(n)


if __name__ == '__main__':
    print(run(5))
    #print(run(500))
